// enum Sexo {
// 	M, F
// }

// enum GrauParentesco {
// 	PAI, MAE, IRMAO, TIO, AVO, NETO, SOBRINHO, OUTRO
// }

// enum TipoDocumento {
// 	BILHETE_IDENTIDADE, PASSAPORTE, CEDUALA_PESSOAL, ACENTO_NASCIMENTO, OUTRO
// }

// enum PeriodoLectivo {
// 	TODOS, PRIMEIRO, SEGUNDO, TERCEIRO
// }

// enum Statusrequerimento {
// 	INVALIDO, PENDENTE, ACEITE, REALIZADO
// }

// enum CategoriaContrato {
//     PROPINA, TRANSPORTE, ALIMENTACAO, MATERIAL_DIDATICO
// }

/**********************************/

entity CategoriaAluno(sec_categoria_aluno) {
	nome String required unique,
	desconto Double required, // porcetagem
	pagaPropina Boolean,
	pagaMulta Boolean,
	descricao TextBlob,
	diaPagamento Integer min(1),
	mesAtual Boolean,
	ativo Boolean
}

// ocoorencias sao do tipo de ocoorencia: falta na aula, luta na escola, nao tem material, suspernsao

entity Ocorrencia(sec_ocorrencia) {
	tipo String,  // FALTA, BRIGA, MATERIAL
	data ZonedDateTime required,
	numero String unique required,
	reportarEncarregado Boolean required
}

entity DetalheOcorrencia(sec_detalhe_ocorrencia) {
	de LocalDate,
	ate LocalDate,
	motivo TextBlob required
}

entity FichaMedica(sec_ficha_medica) {
	fazEducacaoFisica Boolean required,
    grupoSanguinio String,
	altura Integer,
	peso Double,
	autorizaMedicamento Boolean required,
	observacao TextBlob,
	nomeMedico String,
	contactoMedico String,
	desmaioConstante Boolean,
    complicacoesSaude TextBlob
}

entity Aluno(sec_aluno) {
	numeroProcesso String unique required,
	transferido Boolean required,
	data ZonedDateTime,
	turmaAnterior String,
	anoConclusao Integer,
	cursoFrequentado String,
	nomeEscolaAnteriror String,
	enderecoEscolaAnterior String,
	classeConcluida Integer,
	numeroProcessoAnterior String,
    situacaoAnterior String
}

entity SituacaoAcademica(sec_situacao_academica) {
	anoLectivo Integer,
	data ZonedDateTime,
	estado String, // Aprovado, reporvado, exame, recurso
	descricao TextBlob
}

entity EncarregadoEducacao(sec_encarregado_educacao) {
	profissao String,
	cargo String,
	faixaSalarial BigDecimal,
	nomeEmpresa String,
	contactoEmpresa String
}

entity Matricula(sec_matricula) {
	data ZonedDateTime,
	numero Integer min(1) required,
	observacao TextBlob,
    anoLectivo Integer required,
	peridoLectivo String required
}

entity DocumentoMatricula(sec_documento_matricula) {
	fotografia Boolean required,
	certificado Boolean required,
	bilhete Boolean required,
	resenciamentoMilitar Boolean,
	cartaoVacina Boolean,
	atestadoMedico Boolean,
	fichaTrnasferencia Boolean,
	historicoEscolar Boolean,
	cedula Boolean,
	descricao String,
	anoLectivo Integer,
	data ZonedDateTime
}

/*
	ANULACAO_MATRICULA,
	TRANSFERENCIA_TURMA,
	TRANSFERENCIA_ESCOLAR,
	CERTIFICADO,
	DECLARACAO_COM_NOTA,
	DECLARACAO_SEM_NOTA,
	AUDIENCIA,
	BOLTETIM_NOTA
*/
entity CategoriaRequerimento(sec_categoria_requerimento) {
	nome String,
	tempoResposta Integer,
	pagase Boolean,
	descricao TextBlob
}

entity Requerimento(sec_requerimento) {
	requerimento AnyBlob,
	data ZonedDateTime,
	statusRequerimento String
}

entity Contrato(sec_contrato) {
	de LocalDate required,
	ate LocalDate required,
	contrato String required, // PROPINA, MATERIAL_DIDATICO
	aceitaTermos Boolean required,
	observacao TextBlob,
	termos AnyBlob,
	emVigor Boolean required
}

/**************************************************/
/**
 * One to many relationship.
 */
relationship OneToMany {
    Aluno to Matricula{aluno(numeroProcesso) required},
    Matricula to Matricula{confirmacao(numero)},
    CategoriaAluno to Matricula{categoria(nome) required},
    Matricula to Ocorrencia{matricula(numero) required},
	CategoriaRequerimento to Requerimento{categoria(nome)},
	Aluno to Contrato{aluno(numeroProcesso) required},
	Aluno to SituacaoAcademica{aluno(numeroProcesso)},
	Matricula to DocumentoMatricula{matricula(numero)},
	Turma to Matricula{turma(descricao) required },
	Aluno to Requerimento{aluno(numeroProcesso)},
	EncarregadoEducacao to Aluno{encarregadoEducacao},
	Disciplina to SituacaoAcademica{disciplina(nome) required }
}

/**
 * One to one relationship.
 */
relationship OneToOne {
	FichaMedica{aluno(numeroProcesso) required} to Aluno,
	DetalheOcorrencia{ocorrencia(numero) required} to Ocorrencia,
	Aluno{pessoa(nome) required } to Pessoa,
	EncarregadoEducacao{pessoa(nome) required } to Pessoa
}

/**
 * Many to one relationship.
 */
relationship ManyToOne {
	Aluno{utilizador(login)} to User,
	Matricula{utilizador(login)} to User,
	Ocorrencia{utilizador(login)} to User,
	FichaMedica{utilizador(login)} to User,
	Requerimento{utilizador(login)} to User
}

dto * with mapstruct
paginate * with pagination
service * with serviceClass
